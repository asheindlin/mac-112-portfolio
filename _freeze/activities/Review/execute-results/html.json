{
  "hash": "fc36a528862bd2430803dd4ee4a34778",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mid-semester Review\"\nnumber-sections: true\nexecute: \n  warning: false\nfig-env: 'figure'\nfig-pos: 'h'\nfig-align: center\ncode-fold: false\n---\n\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n\nReview the basics of wrangling and visualization\n\n:::\n\n\n\n\n## Warm-up\n\n![](https://mac-stat.github.io/images/112/legos.png)\n\nThus far, we've learned how to:\n\n-   use `ggplot()` to construct data visualizations\n-   do some wrangling:\n    -   `arrange()` our data in a meaningful order\n    -   subset the data to only `filter()` the rows and `select()` the columns of interest\n    -   `mutate()` existing variables and define new variables\n    -   `summarize()` various aspects of a variable, both overall and by group (`group_by()`)\n-   reshape our data to fit the task at hand (`pivot_longer()`, `pivot_wider()`)\n-   `join()` different datasets into one\n\nLet's review some basics, emphasizing some themes in Homework 3 feedback!\n\nAlong the way, pay special attention to formatting your code: code is communication.\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 1: Make a plot**\n\nRecall our data on hiking the \"high peaks\" in the Adirondack Mountains of northern New York state. This includes data on the hike’s highest elevation (feet), vertical ascent (feet), length (miles), time in hours that it takes to complete, and difficulty rating.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nhikes <- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n```\n:::\n\n\nConstruct a plot that allows us to examine how vertical ascent varies from hike to hike.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = ascent)) + \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Review_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 2: What's wrong?**\n\nCritique the following interpretation of the above plot:\n\n\"The typical ascent is around 3000 feet.\"\n\nWe dont know if it is in feet.\n\\\n\\\n\\\n\\\n\n**EXAMPLE 3: Captions, axis labels, and titles**\n\nCritique the use of the axis labels, caption, and title here. Then make a better version.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = ascent)) + \n  geom_density() + \n  labs(x = \"the vertical ascent of a hike in feet\",\n       title = \"Density plot of hike vertical ascent\")\n```\n\n::: {.cell-output-display}\n![A density plot of the vertical ascent of a hike, in feet](Review_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 4: Wrangling practice -- one verb**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many hikes are in the dataset?\nhikes |> \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46\n```\n\n\n:::\n\n```{.r .cell-code}\n# What's the maximum elevation among the hikes?\nhikes |> \n  summarize(max(elevation))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  max(elevation)\n1           5344\n```\n\n\n:::\n\n```{.r .cell-code}\n# How many hikes are there of each rating?\n\nhikes |> \n  count(rating)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     rating  n\n1 difficult  8\n2      easy 11\n3  moderate 27\n```\n\n\n:::\n\n```{.r .cell-code}\n# What hikes have elevations above 5000 ft?\nhikes |> \n  filter(elevation > 5000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             peak elevation difficulty ascent length time   rating\n1     Mt. Marcy        5344          5   3166   14.8   10 moderate\n2 Algonquin Peak       5114          5   2936    9.6    9 moderate\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 5: Wrangling practice -- multiple verbs**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What's the average hike length for each rating category?\nhikes |> \n  group_by(rating) |> \n  summarize(mean(length))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  rating    `mean(length)`\n  <chr>              <dbl>\n1 difficult          17.0 \n2 easy                9.05\n3 moderate           12.7 \n```\n\n\n:::\n\n```{.r .cell-code}\n# What's the average length of *only* the easy hikes\nhikes |> \n  filter(rating == \"easy\") |> \n  summarize(mean(length))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean(length)\n1     9.045455\n```\n\n\n:::\n\n```{.r .cell-code}\n# What 6 hikes take the longest time to complete?\nhikes |> \n  arrange(desc(time)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            peak elevation difficulty ascent length time    rating\n1    Mt. Emmons       4040          7   3490   18.0   18 difficult\n2   Seward Mtn.       4361          7   3490   16.0   17 difficult\n3 Mt. Donaldson       4140          7   3490   17.0   17 difficult\n4  Mt. Skylight       4926          7   4265   17.9   15 difficult\n5     Gray Peak       4840          7   4178   16.0   14 difficult\n6  Mt. Redfield       4606          7   3225   17.5   14 difficult\n```\n\n\n:::\n\n```{.r .cell-code}\n# What 6 hikes take the longest time per mile?\n\nhikes |> \n  mutate(time_per_mile = time / length) |> \n  arrange(desc(time_per_mile)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           peak elevation difficulty ascent length time    rating time_per_mile\n1   Giant Mtn.       4627          4   3050    6.0  7.5      easy      1.250000\n2     Nye Mtn.       3895          6   1844    7.5  8.5  moderate      1.133333\n3  Street Mtn.       4166          6   2115    8.8  9.5  moderate      1.079545\n4  Seward Mtn.       4361          7   3490   16.0 17.0 difficult      1.062500\n5    South Dix       4060          6   3050   11.5 12.0  moderate      1.043478\n6 Cascade Mtn.       4098          2   1940    4.8  5.0      easy      1.041667\n```\n\n\n:::\n:::\n\n\n\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n**EXAMPLE 1: Make a plot**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A boxplot or histogram could also work!\nggplot(hikes, aes(x = ascent)) + \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Review_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 2: What's wrong?**\n\nThat interpretation doesn't say anything about the variability in ascent or other important features.\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 3: Captions, axis labels, and titles**\n\nThe axis label is too long, and the caption and title are redundant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Better\nggplot(hikes, aes(x = ascent)) + \n  geom_density() + \n  labs(x = \"vertical ascent (feet)\")\n```\n\n::: {.cell-output-display}\n![A density plot of the vertical ascent of a hike, in feet](Review_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 4: Wrangling practice -- one verb**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many hikes are in the dataset?\nhikes |> \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46\n```\n\n\n:::\n\n```{.r .cell-code}\n# What's the maximum elevation among the hikes?\nhikes |> \n  summarize(max(elevation))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  max(elevation)\n1           5344\n```\n\n\n:::\n\n```{.r .cell-code}\n# How many hikes are there of each rating?\nhikes |> \n  count(rating)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     rating  n\n1 difficult  8\n2      easy 11\n3  moderate 27\n```\n\n\n:::\n\n```{.r .cell-code}\n# What hikes have elevations above 5000 ft?\nhikes |> \n  filter(elevation > 5000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             peak elevation difficulty ascent length time   rating\n1     Mt. Marcy        5344          5   3166   14.8   10 moderate\n2 Algonquin Peak       5114          5   2936    9.6    9 moderate\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 5: Wrangling practice -- multiple verbs**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What's the average hike length for each rating category?\nhikes |> \n  group_by(rating) |> \n  summarize(mean(length))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  rating    `mean(length)`\n  <chr>              <dbl>\n1 difficult          17.0 \n2 easy                9.05\n3 moderate           12.7 \n```\n\n\n:::\n\n```{.r .cell-code}\n# What's the average length of *only* the easy hikes\nhikes |> \n  filter(rating == \"easy\") |> \n  summarize(mean(length))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean(length)\n1     9.045455\n```\n\n\n:::\n\n```{.r .cell-code}\n# What 6 hikes take the longest time to complete?\nhikes |> \n  arrange(desc(time)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            peak elevation difficulty ascent length time    rating\n1    Mt. Emmons       4040          7   3490   18.0   18 difficult\n2   Seward Mtn.       4361          7   3490   16.0   17 difficult\n3 Mt. Donaldson       4140          7   3490   17.0   17 difficult\n4  Mt. Skylight       4926          7   4265   17.9   15 difficult\n5     Gray Peak       4840          7   4178   16.0   14 difficult\n6  Mt. Redfield       4606          7   3225   17.5   14 difficult\n```\n\n\n:::\n\n```{.r .cell-code}\n# What 6 hikes take the longest time per mile?\nhikes |> \n  mutate(time_per_mile = time / length) |> \n  arrange(desc(time_per_mile)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           peak elevation difficulty ascent length time    rating time_per_mile\n1   Giant Mtn.       4627          4   3050    6.0  7.5      easy      1.250000\n2     Nye Mtn.       3895          6   1844    7.5  8.5  moderate      1.133333\n3  Street Mtn.       4166          6   2115    8.8  9.5  moderate      1.079545\n4  Seward Mtn.       4361          7   3490   16.0 17.0 difficult      1.062500\n5    South Dix       4060          6   3050   11.5 12.0  moderate      1.043478\n6 Cascade Mtn.       4098          2   1940    4.8  5.0      easy      1.041667\n```\n\n\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "Review_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}